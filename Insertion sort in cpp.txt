
/////////////////////////////////////INSERTION SORT//////////////////////////////////////////////

/*
#include<iostream>
using namespace std;

void insertionsort(int arr[], int n)
{
int i,j;
for(int i=1;i<n;i++)
{
int j = i-1;
int temp = arr[i];

 while(j>=0 && arr[j]>temp)
{
  arr[j+1] = arr[j];
  j--;

}
arr[j+1] = temp;

}

cout<<"\nAfter insertion sort "<<endl;
for(i=0;i<n;i++)
{

  cout<<arr[i]<<" ";
}


}

int main()
{

int arr[] = {5,4,10,1,6,2};
int n = sizeof(arr)/sizeof(arr[0]);

cout<<"Before  insertion sort "<<endl;
for(int i=0;i<n;i++)
{

  cout<<arr[i]<<" ";
  

}

insertionsort(arr,n);

return 0;


}
*/

///////////////////////////////////////////////////


Insertion sort is a simple sorting algorithm that works similar to the way you sort playing cards in your hands
The array is virtually split into a sorted and an unsorted part.
Values from the unsorted part are picked and placed at the correct position in the sorted part.
.
Algorithm 
To sort an array of size n in ascending order: 
1: Iterate from arr[1] to arr[n] over the array. 
2: Compare the current element (key) to its predecessor. 
3: If the key element is smaller than its predecessor, compare it to the elements before. 
   Move the greater elements one position up to make space for the swapped element.



Time Complexity: O(n^2) 
Auxiliary Space: O(1)And it takes minimum time (Order of n) when elements are already sorted.

Boundary Cases: Insertion sort takes maximum time to sort if elements are sorted in reverse order. 

